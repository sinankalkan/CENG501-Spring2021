{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Tensorflow (GPU)","language":"python","name":"py3.6-tfgpu"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"colab":{"name":"A Causal View on Robustness of Neural Networks","provenance":[{"file_id":"https://github.com/AviatorMoser/keras-mnist-tutorial/blob/master/MNIST%20in%20Keras.ipynb","timestamp":1626181870146}],"collapsed_sections":[],"toc_visible":true}},"cells":[{"cell_type":"markdown","metadata":{"id":"9QhO1VLuvNjJ"},"source":["# **CENG 501 Deep Learning - Term Project**\n","\n","**Name:** Barış Suğur \\\\\n","**ID:** 2099315"]},{"cell_type":"markdown","metadata":{"id":"yaIuIrnuuUtg"},"source":["## **A Causal View on Robustness of Neural Networks**\n","\n","This notebook consists of the interpreted implementation of the paper \"A Causal View on Robustness of Neural Networks\" (ICLR 2020) by Cheng Zhang, Kun Zhang and Yingzhen Li. This notebook is structed with the aim of clarifying the general aim of the paper (as best as I could) and explaining the different test stages and robustness comparisons between them. Hence it consists four sections which are: \\\\\n","\n","\n","**1.**   Brief Summary of the Paper \\\\\n","**2.**   Dataset Selection and Preperation \\\\\n","**3.**   FCN Training(s) with Augmented Data \\\\\n","**4.**   Proposed Network  \\\\"]},{"cell_type":"markdown","metadata":{"id":"XUtqnc7Z_SAn"},"source":["## **1. Brief Summary Of The Paper**\n","\n","The paper presents a casual view relating the robustness of networks against different and unseen input manipulations which applies to classification tasks and general measurement data. Based on this, a new model called deep casual manipulation augmented model (deep CAMA) is proposed that shows superior robustness against unseen manipulations. \n","\n","More detailed explanations will be given about the proposed method in section 4. However, because the paper is very abstract on certain aspects of the network (and used parameters), some of the parts will be interpreted. \n","\n","For testing the overall robustness of the proposed method, I created three different models that works with same dataset (MNIST). First model is a vanilla FCN that is trained on classic (non-manipulated) data which is tested on randomly manipulated data. This is to show the effect of manipulations that can occur in testing dataset.With the second FCN, we extend the robustness capabilities by adding these randomly generated noisy (or manipulated) inputs to the training dataset. This way we can see the difference data augmentation can make on manipulated inputs and their classifications. Lastly, with the proposed method, similar to second method augmented data will be used for testing data. However since the relation between inputs and their manipulations will be reasoned, we will expect increased performance for unseen manipulations as well."]},{"cell_type":"markdown","metadata":{"id":"vxgGrSd-_SAo"},"source":["## **2. Dataset Selection and Preperation**\n","\n","For the tasks, MNIST dataset is used for numerous reason. Aside of being simple,free and well established, it also is refered number of times in the paper. Also the given manipulation examples like translation and rotation can be easily applied for each input without losing much information and its semantics. The fact that these kind of manipulations occur frequently for handwritten digit inputs makes this the perfect dataset to be worked with."]},{"cell_type":"markdown","metadata":{"id":"L2Tkiq-H_SAo"},"source":["### Import Python Modules\n","\n","Load modules into the Python environment."]},{"cell_type":"code","metadata":{"id":"bhyOaSTn_SAp","executionInfo":{"status":"ok","timestamp":1626528060400,"user_tz":-180,"elapsed":272,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["%matplotlib inline\n","import numpy as np                   # advanced math library\n","import matplotlib.pyplot as plt      # MATLAB like plotting routines\n","import random                        # for generating random numbers\n","\n","from keras.datasets import mnist     # MNIST dataset is included in Keras\n","from keras.models import Sequential  # Model type to be used\n","from scipy.ndimage.interpolation import shift # For data augmentation\n","\n","from keras.layers.core import Dense, Dropout, Activation # Types of layers to be used in our model\n","from keras.utils import np_utils                         # NumPy related tools"],"execution_count":85,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RUkLVSH5_SAp"},"source":["### Download the MNIST Dataset\n","\n","MNIST dataset has 60000 images for training and another 10000 for testing purposes. Fitsr, we will load the dataset and make sure the shapes are correct."]},{"cell_type":"code","metadata":{"id":"jOA25Z35_SAq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626528062553,"user_tz":-180,"elapsed":552,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"3fce5ba0-82f7-4e69-f1d8-f590ca4002f7"},"source":["# Download MNIST dataset\n","(X_train, y_train), (X_test, y_test) = mnist.load_data()\n","# Copy training dataset (for augmentation)\n","XA_train = X_train.copy()\n","# Print shapes (just to be sure)\n","print(\"X_train shape\", X_train.shape)\n","print(\"y_train shape\", y_train.shape)\n","print(\"X_test shape\", X_test.shape)\n","print(\"y_test shape\", y_test.shape)"],"execution_count":86,"outputs":[{"output_type":"stream","text":["X_train shape (60000, 28, 28)\n","y_train shape (60000,)\n","X_test shape (10000, 28, 28)\n","y_test shape (10000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BqSeBokl3cnU"},"source":["### Prepare Training and Testing Datasets\n","\n","Since we will use both classic and manipulated datasets for the tasks, we need to generate two different training datasets with randomly generated manipulations. For simplification, I decided to use only translation with randomized amount and direction. Keep in mind that other manipulations like noise or rotation would work exactly the same way."]},{"cell_type":"code","metadata":{"id":"JivPZdKG36TG","executionInfo":{"status":"ok","timestamp":1626528066779,"user_tz":-180,"elapsed":2210,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["translations_train = np.zeros((60000,2))\n","# FOR TRAINING DATASET\n","# Select approximately %20 of the training set\n","train_onehot = np.random.randint(5, size=len(X_train))\n","# For selected inputs, apply randomized translation (in any direction)\n","for i in range(len(X_train)):\n","  if(train_onehot[i] == 1):\n","    # Create random x,y pair for translation (-8 < x < 8 & -8 < y < 8)\n","    shifts = np.random.randint(16, size=2) - 8\n","    # Shift the input according to generated x,y pair\n","    XA_train[i] = shift(X_train[i], shifts, cval=0)\n","    translations_train[i] = shifts"],"execution_count":87,"outputs":[]},{"cell_type":"code","metadata":{"id":"-y36iblX_UoI","executionInfo":{"status":"ok","timestamp":1626528071789,"user_tz":-180,"elapsed":1048,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["translations_test = np.zeros((10000,2))\n","# FOR TESTING DATASET\n","# Select approximately %50 of the testing set\n","test_onehot = np.random.randint(2, size=len(X_test))\n","# For selected inputs, apply randomized translation (in any direction)\n","for i in range(len(X_test)):\n","  if(test_onehot[i] == 1):\n","    # Create random x,y pair for translation (-10 < x < 10 & -10 < y < 10)\n","    shifts = np.random.randint(20, size=2) - 10\n","    # Shift the input according to generated x,y pair, NOTE that X_test is directly changed, since all the testsets are identical\n","    X_test[i] = shift(X_test[i], shifts, cval=0)\n","    translations_test[i] = shifts"],"execution_count":88,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mm9SuzM5_SAq"},"source":["### View the Manipulated Training Set\n","Now we can see how our manipulations are effected the input images in the training set below. Roughly half of the images should have some amount of translation embeded in them (since I did not provide a seed, executing the block again will result in different images). Also notice we did not create a seperate testing set like we did in training set because all three implemented networks will use the manipulated dataset for testing."]},{"cell_type":"code","metadata":{"id":"JKdvNZRU_SAr","colab":{"base_uri":"https://localhost:8080/","height":657},"executionInfo":{"status":"ok","timestamp":1626528079252,"user_tz":-180,"elapsed":2984,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"71d0a49e-16b6-4975-d619-6f8f71913886"},"source":["plt.rcParams['figure.figsize'] = (9,9) # Make the figures a bit bigger\n","\n","# Select random 16 samples from training set\n","for i in range(16):\n","    plt.subplot(4,4,i+1)\n","    num = random.randint(0, len(X_test))\n","    plt.imshow(X_test[num], cmap='gray', interpolation='none')\n","    plt.title(\"Class {}\".format(y_train[num]))\n","plt.tight_layout()"],"execution_count":89,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x648 with 16 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ZMzn0SBz_SAs"},"source":["## **3. FCN Training(s) with Augmented Data**\n","\n","In this section we will observe two different FCN's results. One without the augmented data training and one with it. Naturally, we expect slightly improved performance from the augmented one. Lets begin;\n","\n","### Reshape and Normalize Data\n","We start with flattening the 28 x 28 images into a 1-D vector and apply normalization."]},{"cell_type":"code","metadata":{"id":"vY5b5EKd_SAt","executionInfo":{"status":"ok","timestamp":1626528082314,"user_tz":-180,"elapsed":271,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["# Reshape datasets\n","X_train  = X_train.reshape(60000, 784)  \n","XA_train = XA_train.reshape(60000, 784) \n","X_test   = X_test.reshape(10000, 784)   \n","\n","# Change ints to 32-bit float\n","X_train  = X_train.astype('float32')    \n","XA_train = XA_train.astype('float32') \n","X_test   = X_test.astype('float32') \n","\n","# Apply normalization\n","X_train  /= 255   \n","XA_train /= 255\n","X_test   /= 255 \n","\n","# Modify the classes to be one-hot format\n","nb_classes = 10 \n","Y_train = np_utils.to_categorical(y_train, nb_classes)\n","Y_test = np_utils.to_categorical(y_test, nb_classes)"],"execution_count":90,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MBVSzumk_SAu"},"source":["### Fully Connected Network (FCN)\n","For the FCN, I choose three layered structure with RELU as its activation function. Softmax is selected as loss function since it is suitible for such an output."]},{"cell_type":"code","metadata":{"collapsed":true,"id":"T2qRSQy4_SAv","executionInfo":{"status":"ok","timestamp":1626528084273,"user_tz":-180,"elapsed":264,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["# Sequential model is selected for its simplicity\n","model = Sequential()\n","# FIRST LAYER\n","model.add(Dense(512, input_shape=(784,)))\n","model.add(Activation('relu'))\n","\n","# SECOND LAYER\n","model.add(Dense(256))\n","model.add(Activation('relu'))\n","\n","# THIRD LAYER (output)\n","model.add(Dense(10))\n","model.add(Activation('softmax'))\n"],"execution_count":91,"outputs":[]},{"cell_type":"code","metadata":{"id":"STJuqvlX_SAx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626528086625,"user_tz":-180,"elapsed":266,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"94c7bac3-b64a-4766-ea28-b0877ae1d300"},"source":["# View the summary of built model\n","model.summary()"],"execution_count":92,"outputs":[{"output_type":"stream","text":["Model: \"sequential_9\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_27 (Dense)             (None, 512)               401920    \n","_________________________________________________________________\n","activation_27 (Activation)   (None, 512)               0         \n","_________________________________________________________________\n","dense_28 (Dense)             (None, 256)               131328    \n","_________________________________________________________________\n","activation_28 (Activation)   (None, 256)               0         \n","_________________________________________________________________\n","dense_29 (Dense)             (None, 10)                2570      \n","_________________________________________________________________\n","activation_29 (Activation)   (None, 10)                0         \n","=================================================================\n","Total params: 535,818\n","Trainable params: 535,818\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OL1P7WumGglX"},"source":["Adam optimizer is selected for faster learning. Adam optimizer extends the stochastic gradient descent by adapting the learning rates according to the moment of update amount, providing a faster approach to the solution."]},{"cell_type":"code","metadata":{"collapsed":true,"id":"oFfliZPG_SAz","executionInfo":{"status":"ok","timestamp":1626528089745,"user_tz":-180,"elapsed":270,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["# Adam optimizer for learning\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"],"execution_count":93,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"M5Ol-eHX_SAz"},"source":["### Training the First Model\n","Lets train the first model with non-augmented training data, specifically X_train. "]},{"cell_type":"code","metadata":{"id":"K1eXSuZ0_SA0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626528118232,"user_tz":-180,"elapsed":27275,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"01466006-916f-4235-e078-3d602b05ecc1"},"source":["model.fit(X_train, Y_train, batch_size=128, epochs=5, verbose=1)"],"execution_count":94,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","469/469 [==============================] - 6s 11ms/step - loss: 0.4319 - accuracy: 0.8732\n","Epoch 2/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0865 - accuracy: 0.9736\n","Epoch 3/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0509 - accuracy: 0.9841\n","Epoch 4/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0331 - accuracy: 0.9898\n","Epoch 5/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0256 - accuracy: 0.9912\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f46207402d0>"]},"metadata":{"tags":[]},"execution_count":94}]},{"cell_type":"markdown","metadata":{"id":"AqFpDYo0JRp3"},"source":["### Testing the First Model\n","The model produces very high accuracies for training data, but how will it perform for the manipulated test data?"]},{"cell_type":"code","metadata":{"id":"ELR4xtfd_SA1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1626528122510,"user_tz":-180,"elapsed":1962,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"45751861-3d7a-4e57-a074-69d0409d4fba"},"source":["score = model.evaluate(X_test, Y_test)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":95,"outputs":[{"output_type":"stream","text":["313/313 [==============================] - 1s 3ms/step - loss: 5.0866 - accuracy: 0.5676\n","Test score: 5.086638450622559\n","Test accuracy: 0.5676000118255615\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3YJWbJrOJwiC"},"source":["As we can observe, the score and accuracy changes drastically compared to training results. This is expected since the model tested with manipulations it never encountered in its training dataset. Lets compare these results with the second model which we will train with augmented data."]},{"cell_type":"markdown","metadata":{"id":"zj8pmPfWKGRM"},"source":["### Training the Second Model\n","This time, lets train the second model with augmented training data (that is XA_train). "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ycgBqqkNKTCk","executionInfo":{"status":"ok","timestamp":1626528166353,"user_tz":-180,"elapsed":41285,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"ee67f568-67c4-41ad-def9-bb91486462b5"},"source":["model.fit(XA_train, Y_train, batch_size=128, epochs=5, verbose=1)"],"execution_count":96,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.2675 - accuracy: 0.9201\n","Epoch 2/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0951 - accuracy: 0.9697\n","Epoch 3/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0533 - accuracy: 0.9846\n","Epoch 4/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0321 - accuracy: 0.9904\n","Epoch 5/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0229 - accuracy: 0.9935\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f462385ef10>"]},"metadata":{"tags":[]},"execution_count":96}]},{"cell_type":"markdown","metadata":{"id":"XtMf3IWOKbza"},"source":["### Testing the Second Model\n","Lets test the second model with same augmented test data."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GDBfY-KeKuqP","executionInfo":{"status":"ok","timestamp":1626528169005,"user_tz":-180,"elapsed":1522,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"676dd5b9-0346-4a0a-8288-30185841ed65"},"source":["score = model.evaluate(X_test, Y_test)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":97,"outputs":[{"output_type":"stream","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.6718 - accuracy: 0.8560\n","Test score: 0.6717785000801086\n","Test accuracy: 0.8560000061988831\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"czBky32tMhAq"},"source":["While the performance when compared to the first model is better, we still miss significant amount of the inputs. This is due to the unseen data in the input. While for each run these would change, we can see the inputs of the augmentedly trained model missed."]},{"cell_type":"code","metadata":{"id":"4J7ZxUrt_SA2","colab":{"base_uri":"https://localhost:8080/","height":712},"executionInfo":{"status":"ok","timestamp":1626528187282,"user_tz":-180,"elapsed":3608,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"4b02d417-9057-4997-8e95-4e8d6b1fdda6"},"source":["predicted_classes = model.predict_classes(X_test)\n","incorrect_indices = np.nonzero(predicted_classes != y_test)[0]\n","    \n","plt.figure()\n","for i, incorrect in enumerate(incorrect_indices[:16]):\n","    plt.subplot(4,4,i+1)\n","    plt.imshow(X_test[incorrect].reshape(28,28), cmap='gray', interpolation='none')\n","    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[incorrect], y_test[incorrect]))\n","    \n","plt.tight_layout()"],"execution_count":98,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/sequential.py:450: UserWarning: `model.predict_classes()` is deprecated and will be removed after 2021-01-01. Please use instead:* `np.argmax(model.predict(x), axis=-1)`,   if your model does multi-class classification   (e.g. if it uses a `softmax` last-layer activation).* `(model.predict(x) > 0.5).astype(\"int32\")`,   if your model does binary classification   (e.g. if it uses a `sigmoid` last-layer activation).\n","  warnings.warn('`model.predict_classes()` is deprecated and '\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x648 with 16 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"fBE8gRhZPTax"},"source":["We can see that while some of the inputs are shifted a lot that predicting from them is near impossible, some of them are actually possible to predict. The reason model missed them is because their augmentations are not seen in the training set. With the proposed method, we aim to infer the relation between manipulation and the inputs so that even the unseen changes are predicted."]},{"cell_type":"markdown","metadata":{"id":"xU_bEs9E_SA2"},"source":["## **4. Proposed Network**\n","\n","In this section I tried to implement the proposed network and observe comparison with previous two networks. Howeveri due to the abstract nature of the paper, some steps and details of the network is heavily interpreted by me. Lets start with the main idea of the proposed network.\n","\n","### Casual Manipulated Augmented Model (CAMA)\n","\n","Paper proposes a new model that can infer unseen manipulations on the training data and produce correct results for these inputs. In the previous augmentedly trained network, we observed that some of the failed inputs are perfectly recognizible, the reason for failure is that network did not encountered these types of specific manipulated data and could not refer the type of manipulations (in this case translation on x,y axis) to other inputs.\n","\n","According to the paper, these manipulations on the input data is categorized into three main parts namely Y, M and Z. And end result is calculated with probabilistic model p(X|Y,M,Z). In this context, Y is tthe given input (what digit it is for MNIST), Z is the uninterviened pre-existing manipulations (such as writing style or font) and M is the intervienable manipulations on the input (rotation, tyranslation, noise etc). We are only dealing with M and trying to include p(M|X) to the context of the loss function. This inclusion of X->M is what makes the network learn the unseed manipulations and produce an inference between two concepts.\n","\n","Proposed network (deep CAMA) introduces a new loss function to be used that involves these manipulations on the network so that model can be adapted to such unseen manipulations. The cause variablez Z, Y and M are converted to feature vectors and combined. Latey they are passed through a network to produce distribution for p(X|Y,M,Z). The new loss function includes mainly two parts. First one is (refering to paper) p(x,y,(do(m=0))) for inputs without any manipulatios (the clear definition for do(m=0) is not given in the paper). Other part is p(x,y,m=m_0) that refers the input manipulations. I tried to interpret these concepts as best as I could while creating the loss function. "]},{"cell_type":"markdown","metadata":{"id":"OKYJOd0WlrMm"},"source":["### Prepare Training Data\n","Here we append M as features to already existant Z and Y training data."]},{"cell_type":"code","metadata":{"id":"oJF6bkw7ll4m","executionInfo":{"status":"ok","timestamp":1626528200512,"user_tz":-180,"elapsed":268,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["# Append the M manipulation features to the training data (x,y shifts in this case)\n","XA_train = np.hstack((XA_train,translations_train))\n","X_test = np.hstack((X_test, translations_test))"],"execution_count":100,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d8sFDJGul2dg"},"source":["### Create Network Model\n","For fair comparison, we will create exact same network model with previous networks. Only diference will be the input shape (which is 786 instead of 784 since M is added)."]},{"cell_type":"code","metadata":{"id":"whKX0gfnTU7u","executionInfo":{"status":"ok","timestamp":1626528212676,"user_tz":-180,"elapsed":268,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["# Create same network as pervious FCN's\n","model2 = Sequential()\n","# FIRST LAYER\n","model2.add(Dense(512, input_shape=(786,)))\n","model2.add(Activation('relu'))\n","\n","# SECOND LAYER\n","model2.add(Dense(256))\n","model2.add(Activation('relu'))\n","\n","# THIRD LAYER (output)\n","model2.add(Dense(10))\n","model2.add(Activation('softmax')) # Should have been different but failed to implement\n","\n","# Optimizer\n","model2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"],"execution_count":101,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-cC47Pt5o6e0"},"source":["### Loss Function\n","This is the part I have failed to implement. The idea was to weight two different loss functions wrt the tuned lambda parameter to best fit the model. I have tried different interpreted loss functions other than the default softmax() to include the M feature parameters so manpulations would be infered. I believe this is both due to my lack of understanding of the intention for using ELBO (evidence lower bound) and paper's vague abstraction of the functionality of do(m=0) and do(m=m_0). Nevertheless, each loss function I tried performed worse than softmax so I left the overall implementation as it is. Below is one example of the loss function I have tried. "]},{"cell_type":"code","metadata":{"id":"Nz6LBOQxo5zK","executionInfo":{"status":"ok","timestamp":1626529327745,"user_tz":-180,"elapsed":290,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}}},"source":["lmbd = 0.2 # percentage of manipulated data for training\n","def loss_fn(pred, y, m):\n","  if (m == 0):\n","    return lmbd * calc_elbo(pred,y,0)\n","  else:\n","    return (1 - lmbd) * (calc_elbo(pred,y,0)) + (lmbd) * (calc_elbo(pred,y,m))\n","\n","def calc_elbo(pred, y, cond):\n","  # Calculated ELBO\n","  # pred: Predicted values\n","  # cond: represents m_0, if 0, do(m=0)\n","  return torch.sum(torch.exp(y - pred), 1) + torch.sum((y - pred)**2 / torch.exp(pred), 1)\n"],"execution_count":106,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oQra4Wmnk_o1"},"source":["### Training and Testing\n","\n","Here we will train and test with same parameters as previous models for fair comparison."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KKnBqwnAlPXD","executionInfo":{"status":"ok","timestamp":1626528242160,"user_tz":-180,"elapsed":27552,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"0794cbaa-1791-405a-a966-2ad67d5643d1"},"source":["# Train the model\n","model2.fit(XA_train, Y_train, batch_size=128, epochs=5, verbose=1)"],"execution_count":102,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","469/469 [==============================] - 6s 11ms/step - loss: 0.7467 - accuracy: 0.7691\n","Epoch 2/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.2024 - accuracy: 0.9379\n","Epoch 3/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.1156 - accuracy: 0.9633\n","Epoch 4/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0703 - accuracy: 0.9791\n","Epoch 5/5\n","469/469 [==============================] - 5s 11ms/step - loss: 0.0514 - accuracy: 0.9835\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f4620956a50>"]},"metadata":{"tags":[]},"execution_count":102}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SXWn5neelPL_","executionInfo":{"status":"ok","timestamp":1626528247172,"user_tz":-180,"elapsed":1827,"user":{"displayName":"Barış Suğur","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghxc_LKM8kxkw2gl5FCRHzcfx-Y5yN160HFxPmd9g=s64","userId":"10675100347136515254"}},"outputId":"708d21c9-8864-4bea-e9ad-d9db917065b8"},"source":["# Test the model\n","score = model2.evaluate(X_test, Y_test)\n","print('Test score:', score[0])\n","print('Test accuracy:', score[1])"],"execution_count":103,"outputs":[{"output_type":"stream","text":["313/313 [==============================] - 1s 3ms/step - loss: 0.6965 - accuracy: 0.8423\n","Test score: 0.6965129375457764\n","Test accuracy: 0.8422999978065491\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-3hoG4VOqKlM"},"source":["Due to the failed implementation of loss function, this result did not perform any better than the augmentedly trained network. I think with the proper loss function implementation, it would have performed slightly better (mentioned %10-15 higher accuracies depending of inputs). "]}]}